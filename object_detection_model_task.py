# -*- coding: utf-8 -*-
"""Object Detection Model task

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nZoBafcK0OoVO_BHJNzLuY0YyeIWV_Lk
"""

pip install torch torchvision albumentations opencv-python matplotlib

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader
from torchvision.datasets import VOCDetection
import torchvision.transforms as T
import torchvision.models as models
from PIL import Image
import os

class VOCDataset(Dataset):
    def __init__(self, root, image_set='train', transform=None):
        self.dataset = VOCDetection(root=root, year='2007', image_set=image_set, download=True)
        self.transform = transform

    def __len__(self):
        return len(self.dataset)

    def __getitem__(self, idx):
        image, target = self.dataset[idx]
        image = self.transform(image)

        boxes = []
        labels = []
        for obj in target['annotation']['object']:
            bbox = obj['bndbox']
            xmin = int(bbox['xmin'])
            ymin = int(bbox['ymin'])
            xmax = int(bbox['xmax'])
            ymax = int(bbox['ymax'])
            boxes.append([xmin, ymin, xmax, ymax])
            labels.append(1)  # Simplified for demonstration: assume all class 1

        boxes = torch.tensor(boxes, dtype=torch.float32)
        labels = torch.tensor(labels, dtype=torch.int64)

        return image, {'boxes': boxes, 'labels': labels}

class YOLODetector(nn.Module):
    def __init__(self, num_classes=20):
        super(YOLODetector, self).__init__()
        self.backbone = models.resnet18(pretrained=True)
        self.backbone = nn.Sequential(*list(self.backbone.children())[:-2])
        self.detector = nn.Sequential(
            nn.Conv2d(512, 256, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.Conv2d(256, 5 + num_classes, kernel_size=1)  # (x, y, w, h, obj_conf + class scores)
        )

    def forward(self, x):
        x = self.backbone(x)
        x = self.detector(x)
        return x

transform = T.Compose([T.Resize((224, 224)), T.ToTensor()])
train_dataset = VOCDataset(root='.', image_set='train', transform=transform)

def collate_fn(batch):
    return tuple(zip(*batch))

train_loader = DataLoader(train_dataset, batch_size=4, shuffle=True, collate_fn=collate_fn)

def compute_loss(preds, targets):
    return torch.tensor(1.0, requires_grad=True)  # dummy loss for placeholder

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

model = YOLODetector(num_classes=20).to(device)
optimizer = optim.Adam(model.parameters(), lr=1e-4)
num_epochs = 2  # Start small for testing

for epoch in range(num_epochs):
    model.train()
    for images, targets in train_loader:
        images = torch.stack(images).to(device)

        preds = model(images)
        loss = compute_loss(preds, targets)

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

    print(f"Epoch [{epoch+1}/{num_epochs}] Loss: {loss.item():.4f}")